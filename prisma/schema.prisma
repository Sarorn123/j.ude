generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String         @id @default(cuid())
  name     String
  email    String         @unique
  sub      String
  picture  String         @default("")
  sessions Session[]
  projects JudgeProject[]
  tasks    TaskProject[]
  chatPdfs ChatPdf[]
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  userId    String
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model JudgeProject {
  id          String           @id @default(cuid())
  name        String
  description String
  userId      String
  user        User             @relation(references: [id], fields: [userId], onDelete: Cascade)
  containers  JudgeContainer[]
}

model JudgeContainer {
  id           String       @id @default(cuid())
  title        String
  judgeProject JudgeProject @relation(fields: [projectId], references: [id])
  projectId    String
  items        String[]     @default([])
  index        Int?
}

model TaskProject {
  id          String          @id @default(cuid())
  name        String
  description String
  deadline    DateTime?
  containers  TaskContainer[]
  createdAt   DateTime        @default(now())
  userId      String
  user        User            @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model TaskContainer {
  id              String      @id @default(cuid())
  title           String
  projectId       String
  progressProject TaskProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks           Task[]
  index           Int?
}

model Task {
  id          String        @id @default(cuid())
  name        String
  description String?
  deadline    DateTime?
  containerId String
  container   TaskContainer @relation(fields: [containerId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
}

model FileStorage {
  id   String  @id @default(cuid())
  url  String  @unique
  name String
  hash String?
  type String
}

model ChatPdf {
  id           String   @id @default(cuid())
  sourceId     String   @unique
  name         String   @default("")
  pdfs         String
  summary      String   @default("")
  conversation Json?
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
